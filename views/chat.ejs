<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>‚õìÔ∏è‚Äçüí• LinkUp Chat</title>
    <style>
      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
      }

      #videos {
        display: grid;
        grid-template-columns: 1fr;
        height: 100vh;
        overflow: hidden;
      }

      .video-player {
        background-color: black;
        width: 100%;
        height: 100%;
        object-fit: cover;
      }

      .smallFrame {
        position: fixed;
        bottom: 100px;
        right: 20px;
        height: 170px;
        width: 300px;
        border-radius: 6px;
        z-index: 10;
      }

      #controls {
        position: fixed;
        bottom: 20px;
        left: 50%;
        transform: translateX(-50%);
        display: flex;
        gap: 1em;
      }

      .control-container {
        background-color: #6df966;
        padding: 20px;
        border-radius: 50%;
        display: flex;
        justify-content: center;
        align-items: center;
        cursor: pointer;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
        transition: transform 0.3s, box-shadow 0.3s;
      }

      .control-container:hover {
        transform: scale(1.1);
        box-shadow: 0 6px 18px rgba(0, 0, 0, 0.3);
      }

      .control-container svg {
        height: 30px;
        width: 30px;
      }

      #leave-btn {
        background-color: rgb(255, 80, 80, 1);
      }

      @media screen and (max-width: 600px) {
        .smallFrame {
          height: 80px;
          width: 120px;
        }

        .control-container img {
          height: 20px;
          width: 20px;
        }
      }
    </style>
    <link href="/css/style.css" rel="stylesheet" />
  </head>

  <body class="flex flex-col h-screen bg-gradient-to-br from-gray-900 via-gray-800 to-gray-700 text-white">
    <%- include('partials/header') %>
    <div class="fixed videoblock hidden z-[222] w-full h-svh">
      <div id="videos">
        <video
          class="video-player"
          id="localVideo"
          autoplay
          muted
          playsinline
        ></video>
        <video
          class="video-player"
          id="remoteVideo"
          autoplay
          playsinline
        ></video>
      </div>
      <div id="controls">
        <div class="control-container" id="cameraButton">
          <svg
            id ="micIcon"
            width="21"
            height="14"
            viewBox="0 0 21 14"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              d="M20.525 2.149C20.365 2.05 20.183 2 20 2C19.847 2 19.694 2.035 19.553 2.105L17 3.382V3C17 1.346 15.654 0 14 0H3C1.346 0 0 1.346 0 3V11C0 12.654 1.346 14 3 14H14C15.654 14 17 12.654 17 11V10.618L19.553 11.894C19.694 11.965 19.847 12 20 12C20.183 12 20.365 11.95 20.525 11.851C20.82 11.668 21 11.347 21 11V3C21 2.653 20.82 2.332 20.525 2.149ZM5 8.5C4.171 8.5 3.5 7.829 3.5 7C3.5 6.171 4.171 5.5 5 5.5C5.829 5.5 6.5 6.171 6.5 7C6.5 7.829 5.829 8.5 5 8.5Z"
              fill="white"
            />
          </svg>
        </div>

        <div class="control-container bg-red-600 hover:bg-red-700" id="hangup">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 24 24"
            class="text-white"
          >
            <path d="M0 0h24v24H0z" fill="none" />
            <path
              d="M20 15.5c-.78 0-1.55-.3-2.12-.88l-1.43-1.42a4.007 4.007 0 0 0-5.54 0l-1.43 1.42A2.983 2.983 0 0 1 4 15.5c-.78 0-1.55-.3-2.12-.88A2.983 2.983 0 0 1 1 12.5a2.983 2.983 0 0 1 .88-2.12l7-7a4.007 4.007 0 0 1 5.54 0l7 7c.58.58.88 1.34.88 2.12s-.3 1.55-.88 2.12c-.58.58-1.34.88-2.12.88z"
              fill="white"
            />
          </svg>
        </div>

        <div class="control-container" id="micButton">
          <svg
            width="20"
            height="20"
            viewBox="0 0 14 20"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              fill-rule="evenodd"
              clip-rule="evenodd"
              d="M7 12.5C8.7 12.5 10 11.2 10 9.5V3.5C10 1.8 8.7 0.5 7 0.5C5.3 0.5 4 1.8 4 3.5V9.5C4 11.2 5.3 12.5 7 12.5ZM12.3 9.5C12.3 12.5 9.8 14.6 7 14.6C4.2 14.6 1.7 12.5 1.7 9.5H0C0 12.9 2.7 15.7 6 16.2V19.5H8V16.2C11.3 15.7 14 12.9 14 9.5H12.3Z"
              fill="white"
            />
          </svg>
        </div>
      </div>
    </div>

    <div
      id="incoming-call"
      class="hidden fixed z-[222] w-full h-screen bg-gray-900 bg-opacity-75  items-center justify-center"
    >
      <div class="bg-white p-8 rounded-md text-center shadow-lg">
        <p class="mb-4 text-lg font-semibold text-gray-900">
          Incoming Call...
        </p>
        <div class="flex justify-center space-x-4">
          <button
            id="accept-call"
            class="bg-green-500 text-white py-2 px-6 rounded-md font-semibold hover:bg-green-600"
          >
            Accept
          </button>
          <button
            id="reject-call"
            class="bg-red-500 text-white py-2 px-6 rounded-md font-semibold hover:bg-red-600"
          >
            Reject
          </button>
        </div>
      </div>
    </div>

    <main
      class="flex-1 p-4 overflow-y-auto relative bg-gray-800 text-white rounded-t-lg"
      id="message-container"
    >
      <div
        class="nobody text-gray-400 absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 w-2/3 text-center"
      >
        Wait here, somebody will join you soon...
      </div>
    </main>

    <form
      id="chatform"
      class="bg-gray-900 p-4 flex items-center space-x-4 border-t border-gray-700"
    >
      <input type="hidden" id="userid" value="" />
      <input
        type="text"
        id="messagebox"
        class="flex-1 bg-gray-700 border-none rounded-md px-4 py-3 text-sm focus:outline-none focus:ring-2 focus:ring-indigo-500 text-white placeholder-gray-400"
        placeholder="Type a message..."
      />
      <button
        type="submit"
        class="bg-indigo-600 text-white py-3 px-6 rounded-md font-semibold hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 transition-colors duration-300"
      >
        Send
      </button>
    </form>

    <video id="local-video" class="hidden" autoplay></video>
    <video id="remote-video" class="hidden" autoplay></video>
  </body>
</html>

























    <script
      src="https://cdn.socket.io/4.7.5/socket.io.min.js"
      integrity="sha384-2huaZvOR9iDzHqslqwpR87isEmrfxqyWOF7hr7BY6KG0+hVKLoEXMPUJw3ynWuhO"
      crossorigin="anonymous"
    ></script>

    <script>
      const socket = io();
      const chatform = document.querySelector("#chatform");
      const messagebox = document.querySelector("#messagebox");
      const messagecontainer = document.querySelector("#message-container");

      let room;

      socket.emit("joinroom");

      socket.on("joined", function (roomname) {
        room = roomname;
        document.querySelector(".nobody").classList.add("hidden");
      });

      socket.on("message", function (message) {
        receiveMessage(message);
      });

      chatform.addEventListener("submit", function (event) {
        event.preventDefault();
        console.log(messagebox.value);
        socket.emit("message", { room: room, message: messagebox.value });
        attachMessage(messagebox.value);
        messagebox.value = ""; //blaank the input message
      });

      function attachMessage(message) {
    const userMessageContainer = document.createElement("div");
    userMessageContainer.classList.add("flex", "my-2", "justify-end", "transition-transform", "duration-300");

    const userMessageDiv = document.createElement("div");
    userMessageDiv.classList.add(
        "bg-gradient-to-r", 
        "from-gray-700", 
        "to-gray-900", 
        "text-white",
        "p-4",
        "rounded-lg",
        "shadow-md",
        "max-w-xs",
        "transform",
        "hover:scale-105", // Scale effect on hover
        "transition-transform",
        "duration-300"
    );

    const userMessageText = document.createElement("p");
    userMessageText.textContent = message;

    userMessageDiv.appendChild(userMessageText);
    userMessageContainer.appendChild(userMessageDiv);

    const messageContainer = document.getElementById("message-container");
    messageContainer.appendChild(userMessageContainer);

    // Auto-scroll to the bottom
    messageContainer.scrollTop = messageContainer.scrollHeight;
}



function receiveMessage(message) {

  //console.log("received message", message);
  //console.trace(message)
    const messageContainer = document.createElement("div");
    messageContainer.classList.add("flex", "my-2", "justify-start");

    const messageDiv = document.createElement("div");
    messageDiv.classList.add(
        "bg-gradient-to-r",
        "from-gray-200",
        "to-gray-300", // Light gradient for received messages
        "text-gray-800",
        "p-4",
        "rounded-lg",
        "shadow-lg", // Add shadow for depth
        "max-w-xs",
        "border",
        "border-gray-400" // Light border to enhance separation
    );

    const messageText = document.createElement("p");
    messageText.textContent = message;

    messageDiv.appendChild(messageText);

    messageContainer.appendChild(messageDiv);

    const messageContainerElement = document.getElementById("message-container");
    messageContainerElement.appendChild(messageContainer);

    // Auto-scroll to the bottom
    messageContainerElement.scrollTop = messageContainerElement.scrollHeight;
}


      // // WEBRTC START
      let localStream;
      let remoteStream;
      let peerConnection;
      let inCall = false;

      const rtcSettings = {
        iceServers: [{ urls: "stun:stun.l.google.com:19302" }],
      };

      const initialize = async () => {
        socket.on("signalingMessage", handleSignalingMessage);
        console.log("Initializing...");

        try {
          localStream = await navigator.mediaDevices.getUserMedia({
            audio: true,
            video: true,
          });
          console.log("localstrem  is initialised");
          console.log(localStream);
          document.querySelector("#localVideo").srcObject = localStream;
          document.querySelector("#localVideo").style.display = "block";
          
            initiateOffer();

          inCall = true;
        } catch (err) {
          console.log("Rejected by browser" + err);
        }
      };



      const initiateOffer = async () => {

        await createPeerConnection();
        try {
          const offer = await peerConnection.createOffer();
          await peerConnection.setLocalDescription(offer);
          socket.emit("signalingMessage", {
            room,
            message: JSON.stringify({
              type: "offer",
              offer,
            }),
          });
        } catch (err) {
          console.log("error in creating offer" + err);
        }
      };

      const createPeerConnection = () => {
        if (!localStream) {
        console.error("localStream is not defined.");
        return;
    }

        peerConnection = new RTCPeerConnection(rtcSettings);

        remoteStream = new MediaStream();

        document.querySelector("#remoteVideo").srcObject = remoteStream;
        document.querySelector("#remoteVideo").style.display = "block";
        document.querySelector("#localVideo").classList.add("smallFrame");



        localStream.getTracks().forEach((track) => {
    if (track) {
        peerConnection.addTrack(track, localStream);
    } else {
        console.error("Track is undefined.");
    }
});

        // localStream.getTracks().forEach((track) => {
        //   //console.log(localStream);
        //   peerConnection.addTrack(track, localStream);
        // });

        peerConnection.ontrack = (event) => {

          if (event.streams[0]) {
        event.streams[0].getTracks().forEach((track) => {
            remoteStream.addTrack(track);
        });
    } else {
        console.error("Received undefined stream in ontrack event:", event);
    }

          // event.streams[0].getTracks().forEach((track) => {
          //   remoteStream.addTrack(track); 
          // });
        };

        //handle ice candiadtes

        peerConnection.onicecandidate = (event) => {
          if (event.candidate) {
            console.log("Sending Ice Candidates");

            socket.emit("signalingMessage", {
              room,
              message: JSON.stringify({
                type: "candidate",
                candidate: event.candidate,
              }),
            });
          }
        };

      //  log connection to state changes

        peerConnection.onconnectionstatechange = () => {
          console.log(
            "connection state changed ",
            peerConnection.connectionState
          );
        };
      };

      const handleSignalingMessage = async (message) => {
        const { type, offer, answer, candidate } = JSON.parse(message);
        if (type === "offer") handleOffer(offer);
        if (type === "answer") handleAnswer(answer);
        if (type === "candidate" && peerConnection) {
          try {
            await peerConnection.addIceCandidate(candidate);
          } catch (error) {
            console.log(error);
          }
        }
        if (type === "hangup") {
          hangup();
        }
      };

      const handleOffer = async (offer) => {
        await createPeerConnection();
        try {
          await peerConnection.setRemoteDescription(offer);
          const answer = await peerConnection.createAnswer();
          await peerConnection.setLocalDescription(answer);
          socket.emit("signalingMessage", {
            room,
            message: JSON.stringify({ type: "answer", answer }),
          });
          inCall = true;
        } catch (error) {
          console.log("failed to handle offer");
        }
      };

      const handleAnswer = async (answer) => {
        try {
          await peerConnection.setRemoteDescription(answer);
        } catch (error) {
          console.log("failed to handle answer");
        }
      };

      document
        .querySelector("#video-call-btn")
        .addEventListener("click", function () {
          //alert("hey")
          socket.emit("startVideoCall", { room });
        });

      socket.on("incomingCall", function () {
        //console.log("hey");
        document.querySelector("#incoming-call").classList.remove("hidden");
      });

      socket.on("callAceepted", function () {
        initialize();
        document.querySelector(".videoblock").classList.remove("hidden");
      });

      document
        .querySelector("#accept-call")
        .addEventListener("click", function () {
          document.querySelector("#incoming-call").classList.add("hidden");
          initialize();
          document.querySelector(".videoblock").classList.remove("hidden");
          socket.emit("acceptCall", { room });
        });

      document
        .querySelector("#reject-call")
        .addEventListener("click", function () {
          document.querySelector("#incoming-call").classList.add("hidden");
          socket.emit("rejectCall", { room });
        });

      socket.on("callRejected", function () {
        alert("Call rejected by other user");
      });

      document.querySelector("#hangup").addEventListener("click", function () {
        hangup();
      });

      function hangup() {
        if (peerConnection) {
          peerConnection.close();
          peerConnection = null;
          localStream.getTracks().forEach((track) => track.stop());

          document.querySelector(".videoblock").classList.add("hidden");
          socket.emit("signalingMessage", {
            room,
            message: JSON.stringify({ type: "hangup" }),
          });
          inCall = false;
        }
      }
// --------------------------------------------
//       //handling the mute state 
//       let isMuted = false; // Initial state
// //let localStream; // Declare localStream

// // Function to toggle mic state
// function toggleMic() {
//   const micButton = document.querySelector("#micButton");
//   const micIcon = document.querySelector("#micIcon");

//   isMuted = !isMuted;

//   if (localStream) {
//     localStream.getAudioTracks().forEach((track) => {
//       track.enabled = !isMuted;
//     });
//   } else {
//     console.warn("Local stream is not initialized.");
//   }

//   // Update UI
//   micButton.classList.toggle("muted", isMuted);

//   // Change icon to cross or default icon based on muted state
//   if (isMuted) {
//     micIcon.setAttribute('viewBox', '0 0 24 24');
//     micIcon.innerHTML = '<path d="M0 0h24v24H0z" fill="none"/><path d="M6 8.5v7h12v-7H6zm6-4c1.65 0 3 1.35 3 3v1.5h-6V7.5c0-1.65 1.35-3 3-3zm0-2C8.96 5.5 6 8.46 6 12.5V14H4v6h16v-6h-2v-1.5c0-4.04-2.96-7-6-7z" fill="red"/>'; // Example cross icon
//   } else {
//     micIcon.setAttribute('viewBox', '0 0 14 20');
//     micIcon.innerHTML = '<path fill-rule="evenodd" clip-rule="evenodd" d="M7 12.5C8.7 12.5 10 11.2 10 9.5V3.5C10 1.8 8.7 0.5 7 0.5C5.3 0.5 4 1.8 4 3.5V9.5C4 11.2 5.3 12.5 7 12.5ZM12.3 9.5C12.3 12.5 9.8 14.6 7 14.6C4.2 14.6 1.7 12.5 1.7 9.5H0C0 12.9 2.7 15.7 6 16.2V19.5H8V16.2C11.3 15.7 14 12.9 14 9.5H12.3Z" fill="white"/>'; // Default mic icon
//   }
// }

// // Event listener for mic button
// document.querySelector("#micButton").addEventListener("click", toggleMic);

// // Function to initialize local stream
// async function initLocalStream() {
//   try {
//     localStream = await navigator.mediaDevices.getUserMedia({ audio: true, video: false });
//     console.log("Local stream initialized.");
//     document.querySelector("#localVideo").srcObject = localStream;
//   } catch (error) {
//     console.error("Error accessing media devices.", error);
//   }
// }

// // Call this function when the page loads
// window.addEventListener('load', initLocalStream);






    </script>
  </body>
</html>
